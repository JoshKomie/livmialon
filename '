import Player from "../objects/player";
import Enemy from "../objects/enemy";
import Spell from "../objects/spell";
import EasyStar from "easystarjs";

export default class GameScene extends Phaser.Scene {

  map:Phaser.Tilemaps.Tilemap;
  player:Player;
  enemies:Enemy[];
  spells:Spell[];
  pathfind;
  playerTimer:number;
  UIText1;
  spellText;
  constructor() {
    super({ key: 'GameScene' })
  }

  create() {
    this.map = this.make.tilemap({key: "tilemap"});
    let tileset = this.map.addTilesetImage("tileset", "tileset");
    this.map.createLayer("Ground", "tileset");
    this.map.createLayer("Walls", "tileset");
    let enemyLayer = this.map.createLayer("Enemies", "tileset");
    enemyLayer.alpha = 0;
    this.player = new Player(this, 0, 0);
    this.add.existing(this.player);
    this.input.keyboard.on('keydown', this.keypress, this);
    this.cameras.main.startFollow(this.player);
    this.enemies = [];
    this.spells = [];
    this.map.forEachTile(this.tilecallback, this, 0, 0, this.map.width, this.map.height, undefined, "Enemies");
    // this.map.destroyLayer("Enemies");
    this.pathfind = new EasyStar.js();
    let grid:number[][] = [];
    for(let x:number = 0; x < this.map.width; x++){
      grid[x] = [];
      for(let y:number = 0; y < this.map.height; y++){
        grid[x][y] = this.map.getTileAt(x,y, true, "Walls").index;
      }
    }
    let column = "";
    for(let y:number = 0; y < this.map.height; y++){
      for(let x:number = 0; x < this.map.width; x++){
        column += grid[x][y] + " ";
      }
      column += "\n";
    }
    console.log(column);
    this.pathfind.setGrid(grid);
    this.pathfind.setAcceptableTiles([-1]);
    this.playerTimer = 0;

    this.UIText1 = this.add.text(0, 0, 'Health: ' + this.player.health + " / 5", {"fontSize": "16px", "fontFamily": "EquipmentPro"});
    this.UIText1.setScrollFactor(0, 0);
    this.spellText = this.add.text(0, 20, "Spells:\n1: Sonus\n2: Olfo\n3: Lux", {"fontSize": "16px", "fontFamily": "EquipmentPro"});
    this.spellText.setScrollFactor(0, 0);
    // const UICam = this.cameras.add(0, 0, 800, 600);
    // this.cameras.main.ignore([ this.UIText1]);
    // UICam.ignore(this.player);
    // this.pathfind.findPath(0, 0, 4, 0, path => {
    //   console.log(path);
    // })
    // this.pathfind.calculate();
    // Game.finder.setGrid(grid);
  }

  tilecallback(tile:Phaser.Tilemaps.Tile, index, arr)
  {
    let id = tile.index;
    if (tile.index !== -1) {
      let enemyType:string = "skeleton";
      if (id===43)
        enemyType = "serpent";
      else if (id ===32)
        enemyType = "skeleton";
      else if (id===33)
        enemyType = "ogre";
      let enemy = new Enemy(this, tile.x, tile.y, enemyType);
      this.enemies.push(enemy);
      this.add.existing(enemy);
      // console.log("TILECALLBACK", tile.index);
    }

  }

  keypress(event)
  {
    // if (this.playerTimer < 500)
    //   return;
    // this.playerTimer = 0;
    let newx = this.player.gridx, newy = this.player.gridy;
    if (event.key === "w") {
      newy = this.player.gridy - 1;
    } else if (event.key === "s") {
      newy = this.player.gridy + 1;
    }
    if (event.key === "a") {
      newx = this.player.gridx - 1;
    } else if (event.key === "d") {
      newx = this.player.gridx + 1;
    }
    if (newx === 17 && newy === 40)
      this.scene.start("WinScene");
    //check collision
    let tile = this.map.getTileAt(newx, newy, false, "Walls");
    if (tile !== null)
      console.log("tileid=", tile.index);
    if (tile === null || tile.index === 8 )//empty
    {
      this.player.gridx = newx;
      this.player.gridy = newy;
    }
    if (event.key === "1")
      this.castSpell("sonus");
    else if (event.key === "2")
      this.castSpell("olfo");
    else if (event.key === "3")
      this.castSpell("lux");

  }

  moveTo() {
    let x = this.input.mousePointer.worldX;
    let y = this.input.mousePointer.worldY;
    let tile = this.map.getTileAtWorldXY(x, y, true, "Walls");
    if (tile.index === -1 || tile.index === 8) {
      this.scene.pathfind.findPath(this.player.gridx, this.playser.gridy, tile.x, tile.y, path => {
        this.path = path;
        this.pathCounter = 0;
      })
      this.scene.pathfind.calculate();
      // let spell = new Spell(this, tile.x, tile.y, spellType);
      // this.add.existing(spell);
      // this.spells.push(spell);
    }
  }

  castSpell(spellType:string) {
    let x = this.input.mousePointer.worldX;
    let y = this.input.mousePointer.worldY;
    let tile = this.map.getTileAtWorldXY(x, y, true);
    if (tile !== null) {
      let spell = new Spell(this, tile.x, tile.y, spellType);
      this.add.existing(spell);
      this.spells.push(spell);
    }


  }


  update(time, delta) {
    // console.log("time=", time, "delta=", delta);
    let pos = this.map.tileToWorldXY(this.player.gridx, this.player.gridy);
    this.player.x = pos.x;
    this.player.y = pos.y;
    for (let enemy of this.enemies) {
      enemy.update(time, delta);
    }
    for (let spell of this.spells) {
      if (spell === undefined) continue;
      spell.update(time, delta);
    }
    this.playerTimer += delta;
    this.UIText1.setText('Health: ' + this.player.health + " / 5");
  }
}
